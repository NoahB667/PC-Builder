### PC Builder API Test Requests ###

### Health Check - Test if the API is running
GET http://localhost:8080/api/components
Accept: application/json

###

### Component Endpoints - Get all components by type ###

### Get all CPUs
GET http://localhost:8080/api/components/cpu
Accept: application/json

###

### Get all GPUs (Graphics Cards)
GET http://localhost:8080/api/components/gpu
Accept: application/json

###

### Get all Motherboards
GET http://localhost:8080/api/components/motherboard
Accept: application/json

###

### Get all RAM
GET http://localhost:8080/api/components/ram
Accept: application/json

###

### Get all Storage (SSDs/HDDs)
GET http://localhost:8080/api/components/storage
Accept: application/json

###

### Get all Power Supplies (PSUs)
GET http://localhost:8080/api/components/psu
Accept: application/json

###

### Get all Cases
GET http://localhost:8080/api/components/case
Accept: application/json

###

### Test individual components to check if data exists

### Test Storage endpoint
GET http://localhost:8080/api/components/storage
Accept: application/json

###

### Test Case endpoint
GET http://localhost:8080/api/components/case
Accept: application/json

###

### Test RAM endpoint
GET http://localhost:8080/api/components/ram
Accept: application/json

###

### Build Suggestion Endpoints ###

### Gaming PC Build - $1200 Budget with NVIDIA preference
GET http://localhost:8080/api/components/build/suggest?purpose=Gaming&budget=1200&preferredBrand=NVIDIA
Accept: application/json

###

### Gaming PC Build - $1500 Budget
GET http://localhost:8080/api/components/build/suggest?purpose=Gaming&budget=1500
Accept: application/json

###

### Budget Gaming Build - $800 with AMD preference
GET http://localhost:8080/api/components/build/suggest?purpose=Gaming&budget=800&preferredBrand=AMD
Accept: application/json

###

### Workstation Build - $2000 Budget
GET http://localhost:8080/api/components/build/suggest?purpose=Workstation&budget=2000
Accept: application/json

###

### Very high budget build suggestion
GET http://localhost:8080/api/components/build/suggest?purpose=Gaming&budget=5000&preferredBrand=NVIDIA
Accept: application/json

###

### Very low budget build suggestion
GET http://localhost:8080/api/components/build/suggest?purpose=Gaming&budget=500
Accept: application/json

###

### Office/Productivity build suggestion
GET http://localhost:8080/api/components/build/suggest?purpose=Office&budget=600
Accept: application/json

###

### Build CRUD Operations ###

### Get all builds
GET http://localhost:8080/api/builds
Accept: application/json

###

### Get specific build by ID
GET http://localhost:8080/api/builds/1
Accept: application/json

###

### Get builds by user ID
GET http://localhost:8080/api/builds/user/1
Accept: application/json

###

### Create a new gaming build
POST http://localhost:8080/api/builds
Content-Type: application/json

{
  "userId": 1,
  "name": "Gaming Beast 1200",
  "budget": 1200.00
}

###

### Create a budget build
POST http://localhost:8080/api/builds
Content-Type: application/json

{
  "userId": 1,
  "name": "Budget Gaming Rig",
  "budget": 800.00
}

###

### Create a workstation build
POST http://localhost:8080/api/builds
Content-Type: application/json

{
  "userId": 2,
  "name": "Content Creator Workstation",
  "budget": 2500.00
}

###

### Update an existing build
PUT http://localhost:8080/api/builds/1
Content-Type: application/json

{
  "userId": 1,
  "name": "Gaming Beast 1200 - Updated",
  "budget": 1300.00
}

###

### Search builds by name
GET http://localhost:8080/api/builds/search?name=Gaming
Accept: application/json

###

### Search builds by budget range ($1000-$1500)
GET http://localhost:8080/api/builds/search?minBudget=1000&maxBudget=1500
Accept: application/json

###

### Search builds by budget range ($800-$1200)
GET http://localhost:8080/api/builds/search?minBudget=800&maxBudget=1200
Accept: application/json

###

### Delete a build
DELETE http://localhost:8080/api/builds/1

###

### User Management Endpoints ###

### Get all users
GET http://localhost:8080/api/users
Accept: application/json

###

### Get user by ID
GET http://localhost:8080/api/users/1
Accept: application/json

###

### Get user by username
GET http://localhost:8080/api/users/username/john_doe
Accept: application/json

###

### Get user by email
GET http://localhost:8080/api/users/email/john@example.com
Accept: application/json

###

### Create a new user
POST http://localhost:8080/api/users
Content-Type: application/json

{
  "username": "john_doe",
  "email": "john@example.com"
}

###

### Create another user for testing
POST http://localhost:8080/api/users
Content-Type: application/json

{
  "username": "jane_smith",
  "email": "jane.smith@example.com"
}

###

### Create user with duplicate username (should fail)
POST http://localhost:8080/api/users
Content-Type: application/json

{
  "username": "john_doe",
  "email": "different@example.com"
}

###

### Create user with duplicate email (should fail)
POST http://localhost:8080/api/users
Content-Type: application/json

{
  "username": "different_user",
  "email": "john@example.com"
}
###

### Update user (replace ID with actual user ID)
PUT http://localhost:8080/api/users/1
Content-Type: application/json

{
  "username": "john_doe_updated",
  "email": "john.updated@example.com"
}

###

### Update user with invalid ID (should fail)
PUT http://localhost:8080/api/users/999
Content-Type: application/json

{
  "username": "nonexistent_user",
  "email": "nonexistent@example.com"
}

###

### Delete user (replace ID with actual user ID)
DELETE http://localhost:8080/api/users/1

###

### Delete user with invalid ID (should fail)
DELETE http://localhost:8080/api/users/999

###



